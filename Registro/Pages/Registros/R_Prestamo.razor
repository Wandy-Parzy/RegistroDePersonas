@page "/R_Prestamo"
@inject PrestamoBLL prestamoBLL
@inject NotificationService NotificationService

 <EditForm Model="prestamos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="card">
        <div class="card-header">
            <h3>Registro de Prestamos</h3>
        </div>
        <div class="card-body">

            @*PersonaId*@
            <div class="form-r ow align-items-center">
                <div class="col">
                    <div class="form-group">
                        <label>PrestamoId</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="prestamos.PrestamoId" class="form-control col-4" />
                            <div class="input-group-append">
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text"
                                        @onclick="Buscar">Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @*Fecha*@
                <div class="input-group">
                    <span class="input-group-text">Fecha</span>
                    <input type="date" @bind-value="prestamos.Fecha" />
                </div><p></p>

                <ValidationMessage For="@(() => prestamos.Fecha)" />

                @*Vence*@
                <div class="input-group">
                    <span class="input-group-text">Vence</span>
                    <input type="date" @bind-value="prestamos.Vence" />
                </div><p></p>

                <ValidationMessage For="@(() => prestamos.Vence)" />

                @*PersonaId*@
              <div class="form-group">
                        <label>PersonaId</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="prestamos.PersonaID" class="form-control col-4" />
                            <div class="input-group-append">
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text"
                                        @onclick="Buscar">Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>

                @*Consepto*@
                <div class="form-group">
                    <label>Concepto</label>
                    <InputText @bind-Value="prestamos.Concepto" class="form-control" />
                    <ValidationMessage For="@(() => prestamos.Concepto)" />
                </div><p></p>

                @*Monto*@
                <div class="form-group">
                    <label>Monto</label>
                    <InputNumber @bind-Value="prestamos.Monto" class="form-control" />
                    <ValidationMessage For="@(() => prestamos.Monto)" />
                </div><p></p>

                 @*Balance*@
                <div class="form-group">
                    <label>Balance</label>
                    <InputNumber @bind-Value="prestamos.Balance" class="form-control" />
                    <ValidationMessage For="@(() => prestamos.Balance)" />
                </div><p></p>

            </div>
            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">Nuevo</button>
                    <button type="submit" class="btn btn-lg btn-success">Guardar</button>
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]

       public Ocupaciones ocupacion { get; set; } = new Ocupaciones();
    public Persona personas { get; set; } = new Persona();

    public Prestamos prestamos { get; set; } = new Prestamos();

    public List<Persona> P_lista = new List<Persona>();
    public int prestamoId { get; set; }

     protected override void OnInitialized()
    {
        if (prestamoId > 0)
        {
            this.prestamos.PrestamoId = prestamoId;
            this.Buscar();

        }
        P_lista = prestamoBLL.GetPersonas(c => true);
    }

    public void Nuevo()
    {
        prestamos = new Prestamos();
    }

    public void Guardar()
    {
 
        bool guardado = prestamoBLL.Guardar(prestamos);
        if (guardado)
        {
            Nuevo();
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Guardado correctamente"
            });
        }
        else
        {

        }
    }
    private void Buscar()
    {
        if (prestamos.PrestamoId > 0 || ocupacion.OcupacionId > 0 || personas.PersonaId > 0 )
        {
            var encontrado = prestamoBLL.Buscar(prestamos.PrestamoId);

            if (encontrado != null)
                this.prestamos = encontrado;
        }
    }

    public void Eliminar()
    {
        bool elimino;

        elimino = prestamoBLL.Eliminar(prestamos);

        if (elimino)
        {
            Nuevo();
        }
    }
      void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

    }

}